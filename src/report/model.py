import time
from datetime import datetime
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.platypus import Image
from src.visualization import Plot

class Report:
    def __init__(self):
        pass 

    def create_report(self, path, image, analysis):
        self.report = canvas.Canvas("{}/report.pdf".format(path), pagesize=letter)
        self.report.setLineWidth(.3)
        self.report.setFont('Helvetica', 15)
        emission_date = datetime.now()
        str_emission_date = emission_date.strftime("%d-%m-%Y")
        self.report.drawString(30,750,'RELATÓRIO OFICIAL')
        self.report.setFont('Helvetica', 12)
        self.report.line(30,747,490,747)
        self.report.drawString(30,735,'EMPRESA: {}'.format(analysis.author.company.name))
        self.report.line(30,732,490,732)
        self.report.drawString(30,720,'USUÁRIO: {0}      ID: {1}'.format(analysis.author.username, analysis.user_id))
        self.report.line(30,717,490,717)
        self.report.drawString(30,705,'ID DATA QUALITY: {}'.format(analysis.raspberry_id))
        self.report.line(30,702,490,702)
        self.report.drawString(30,690,'ID ANÁLISE: {}'.format(analysis.id))
        self.report.line(30,687,490,687)
        self.report.drawImage(image, 490,675, width=90, height=90) 
        self.report.drawString(30,675, 'DATA DE EMISSÃO DO RELATÓRIO: {}'.format(str_emission_date))
        self.report.line(30,672,490,672)
        self.report.drawString(30,660, 'DATA DA ANÁLISE: {}'.format(analysis.date_posted.strftime("%d-%m-%Y")))
        self.table_problem(analysis)
        self.table_health(analysis)
        self.table_geometric(analysis)
        bar = Plot(analysis)
        bar.plot_problems()
        bar = Plot(analysis)
        bar.plot_geometric()
        self.report.drawImage('data/client/{0}/{1}/plots/problem.png'.format(analysis.author.id, analysis.id), 280, 365, width=320, height=300) 
        self.report.drawImage('data/client/{0}/{1}/plots/geometric.png'.format(analysis.author.id, analysis.id), 280, 45, width=320, height=300) 
        self.report.save()       

    def table_health(self, analysis):
        self.report.line(30,605,245,605)
        self.report.line(30,600,245,600)
        self.report.line(30,605,30,540)
        self.report.line(160,605,160,540)
        self.report.line(245,605,245,540)
        self.report.drawString(33,588,'CLASSIFICAÇÃO')
        self.report.drawString(163,588,'QUANTIDADE')
        self.report.line(30,585,245,585)
        self.report.drawString(33,573,'Saudaveis')
        self.report.drawString(163,573, '{:0.2f}%'.format(analysis.saudavel))
        self.report.line(30,570,245,570)
        self.report.drawString(33,558,'Problemas Leves')
        self.report.drawString(163,558, '{:0.2f}%'.format(analysis.imaturo+analysis.manchado+analysis.bandinha+analysis.genetico))
        self.report.line(30,555,245,555)
        self.report.drawString(33,543,'Problemas Graves')
        self.report.drawString(163,543, '{:0.2f}%'.format(analysis.caruncho+analysis.mordido+analysis.contaminantes+analysis.ardido))
        self.report.line(30,540,245,540)


    def table_problem(self, analysis):
        self.report.line(30,465,245,465)
        self.report.line(30,460,245,460)
        self.report.line(30,465,30, 325)
        self.report.line(160,465,160,325)
        self.report.line(245,465,245,325)
        self.report.drawString(33,448,'TIPOS DE PROBLEMA')
        self.report.drawString(163,448,'QUANTIDADE')
        self.report.line(30,445,245,445)
        self.report.drawString(33,433,'Ardido & Mofado')
        self.report.drawString(163,433, '{:0.2f}%'.format(analysis.ardido))
        self.report.line(30, 430, 245, 430)
        self.report.drawString(33, 418,'Bandinha')
        self.report.drawString(163, 418, '{:0.2f}%'.format(analysis.bandinha))
        self.report.line(30, 415, 245, 415)
        self.report.drawString(33, 403,'Carunchado')
        self.report.drawString(163, 403, '{:0.2f}%'.format(analysis.caruncho))
        self.report.line(30, 400, 245, 400)
        self.report.drawString(33, 388,'Contaminantes')
        self.report.drawString(163, 388, '{:0.2f}%'.format(analysis.contaminantes))
        self.report.line(30, 385,245, 385)
        self.report.drawString(33, 373,'Imaturo')
        self.report.drawString(163, 373, '{:0.2f}%'.format(analysis.imaturo))
        self.report.line(30, 370, 245, 370)
        self.report.drawString(33, 358,'Genético')
        self.report.drawString(163, 358, '{:0.2f}%'.format(analysis.genetico))
        self.report.line(30, 355, 245, 355)
        self.report.drawString(33, 343,'Manchado')
        self.report.drawString(163,343, '{:0.2f}%'.format(analysis.manchado))
        self.report.line(30, 340,245, 340)
        self.report.drawString(33, 328,'Mordido')
        self.report.drawString(163,328, '{:0.2f}%'.format(analysis.mordido))
        self.report.line(30, 325, 245, 325)

    def table_geometric(self, analysis):
        self.report.line(30, 250, 245, 250)
        self.report.line(30, 245, 245, 245)
        self.report.line(30, 250, 30, 155)
        self.report.line(160, 250, 160, 155)
        self.report.line(245, 250, 245, 155)
        self.report.drawString(33, 233,'TIPOS DE PENEIRA')
        self.report.drawString(163, 233,'QUANTIDADE')
        self.report.line(30, 230, 245, 230)
        self.report.drawString(33, 218,'Peneira-12')
        self.report.drawString(163, 218, '{:0.2f}%'.format(analysis.size_12))
        self.report.line(30, 215, 245, 215)
        self.report.drawString(33, 203,'Peneira-11')
        self.report.drawString(163, 203, '{:0.2f}%'.format(analysis.size_11))
        self.report.line(30, 200, 245, 200)
        self.report.drawString(33, 188,'Peneira-10')
        self.report.drawString(163, 188, '{:0.2f}%'.format(analysis.size_10))
        self.report.line(30, 185, 245, 185)
        self.report.drawString(33, 173,'Peneira-9')
        self.report.drawString(163, 173, '{:0.2f}%'.format(analysis.size_9))
        self.report.line(30, 170, 245, 170)
        self.report.drawString(33, 158,'Imaturo')
        self.report.drawString(163, 158, '{:0.2f}%'.format(analysis.imaturo))
        self.report.line(30, 155, 245, 155)
